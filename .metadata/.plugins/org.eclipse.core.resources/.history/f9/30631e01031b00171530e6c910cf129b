#include "lpc17xx_pinsel.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_uart.h"

#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"
#include "light.h"
#include "temp.h"
#include "led7seg.h"
#include "stdbool.h"

#define NOTE_PIN_HIGH() GPIO_SetValue(0, 1<<26);
#define NOTE_PIN_LOW()  GPIO_ClearValue(0, 1<<26);

#define blue_on() GPIO_SetValue(0, 1 << 26); //linked to speaker
#define blue_off() GPIO_ClearValue(0, 1 << 26);

#define red_on() GPIO_SetValue(2, 1 << 0); //link to temp sensor
#define red_off() GPIO_ClearValue(2, 1 << 0);

#define LOW_LIGHT_WARNING 50
#define HIGH_TEMP_WARNING 330

volatile uint32_t msTicks = 0;
//static uint8_t barPos = 2;
static uint8_t light_value = 0;
static int32_t temp_value = 0;
//static char SEGMENT_DISPLAY;
//static char* msg = NULL;
static int siren_flag = 0;
static uint8_t seg = 0;

bool sec_Flag = false;
static uint32_t sec_Time = 0;
bool ms_Flag_200 = false;
static uint32_t ms_200_Time = 0;
bool monitor_Mode = false;
bool pre_Monitor_Mode = false;
bool mode_Btn = true;
bool pre_Mode_Btn = true;

/*Interrupt Handler*/
void SysTick_Handler(void) { // This function is called every 1ms
	/*1ms counter*/
	msTicks++;

	/*mode switch*/
	mode_Btn = (GPIO_ReadValue(1) >> 31) & 0x01;
	if (mode_Btn == true && pre_Mode_Btn == false) {
		monitor_Mode = (monitor_Mode) ? false : true;
		sec_Time = msTicks;
	}
	pre_Mode_Btn = mode_Btn;

	/*set 200ms flag*/
	ms_Flag_200 = (msTicks - ms_200_Time > 200) ? true : ms_Flag_200;
	ms_200_Time = (msTicks - ms_200_Time > 200) ? msTicks : ms_200_Time;
}

void EINT3_IRQHandler(void) {
	// SW3
	printf("inside int3\n");
	LPC_GPIOINT ->IO0IntClr |= 1 << 4;
	siren_flag = 1;
}

static uint32_t getTicks(void) { //get current tick (time)
	return msTicks;
}

/*Initialize SSP*/
static void init_ssp(void) {
	SSP_CFG_Type SSP_ConfigStruct; //Initialize SPI pin connect : P0.7 - SCK; P0.8 - MISO; P0.9 - MOSI; P2.2 - SSEL - used as GPIO
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct); // Initialize SSP peripheral with parameter given in structure above
	SSP_Cmd(LPC_SSP1, ENABLE); // Enable SSP peripheral
}

/*Initialize GPIO*/
void init_GPIO(void) {
	// Initialize button
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 10;
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(2, 1 << 10, 0);

	/*SW4 monitor button*/
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 1;
	PinCfg.Pinnum = 31;
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(1, 1 << 31, 0);

	//RGB led
	//red
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(2, 1 << 0, 1);

	//blue
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 26;
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(2, 1 << 26, 1);
}

/* Initialize I2C2 pin connect */
static void init_i2c(void) {
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);
	I2C_Init(LPC_I2C2, 100000);	// Initialize I2C peripheral
	I2C_Cmd(LPC_I2C2, ENABLE);/* Enable I2C1 operation */
}

/*uart*/
void pinsel_uart3(void) {
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 0;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 1;
	PINSEL_ConfigPin(&PinCfg);
}
void init_uart(void) {
	UART_CFG_Type uartCfg;
	uartCfg.Baud_rate = 115200;
	uartCfg.Databits = UART_DATABIT_8;
	uartCfg.Parity = UART_PARITY_NONE;
	uartCfg.Stopbits = UART_STOPBIT_1;
	pinsel_uart3();	//pin select for uart3;
	UART_Init(LPC_UART3, &uartCfg);	//supply power & setup working parameters for uart3
	UART_TxCmd(LPC_UART3, ENABLE);	//enable transmit for uart3
}

/*Initializers*/
void init_all(void) {
	/* SystemTick clock configuration */
	SysTick_Config(SystemCoreClock / 1000);  // every 1ms
	init_ssp();
	init_GPIO();
	pca9532_init();
	init_i2c();
	init_uart();
	acc_init();
	oled_init();
	led7seg_init();
	temp_init(&getTicks);

	light_enable();
	light_setRange(LIGHT_RANGE_64000);

	LPC_GPIOINT ->IO0IntEnF |= 1 << 4;
	LPC_GPIOINT ->IO2IntEnF |= 1 << 5;
	NVIC_EnableIRQ(EINT3_IRQn);
}

void display_readings(uint8_t light_value, int8_t x, int8_t y, int8_t z,
		int32_t temp_value) {
	//light
	uint8_t toPrint[50] = { 0 };
	sprintf(toPrint, "L: %u    \n", light_value);
	oled_putString(10, 15, (uint8_t *) toPrint, OLED_COLOR_WHITE,
			OLED_COLOR_BLACK);
	//temp
	sprintf(toPrint, "T: %0.2f    \n", (double) temp_value / 10);
	oled_putString(10, 25, (uint8_t *) toPrint, OLED_COLOR_WHITE,
			OLED_COLOR_BLACK);
	//AX
	sprintf(toPrint, "Ax: %0.2f    \n", (double) x);
	oled_putString(10, 35, (uint8_t *) toPrint, OLED_COLOR_WHITE,
			OLED_COLOR_BLACK);
	//AY
	sprintf(toPrint, "Ay: %0.2f    \n", (double) y);
	oled_putString(10, 45, (uint8_t *) toPrint, OLED_COLOR_WHITE,
			OLED_COLOR_BLACK);
	//AZ
	sprintf(toPrint, "Az: %0.2f    \n", (double) z);
	oled_putString(10, 55, (uint8_t *) toPrint, OLED_COLOR_WHITE,
			OLED_COLOR_BLACK);
}
/*OLED Display*/

int main(void) {
	init_all();

	int8_t x = 0;
	int8_t y = 0;
	int8_t z = 0;

	int32_t xoff = 0;
	int32_t yoff = 0;
	int32_t zoff = 0;

	uint16_t transmit_Count = 0;
	uint8_t transmit_Msg[100] = { 0 };

	uint32_t stopTime;
	uint32_t startTime;

	char segArray[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',
			'8', 'C', '0', 'E', 'F' };

	// Assume base board in zero-g position when reading first value.
	acc_read(&x, &y, &z);
	xoff = 0 - x;
	yoff = 0 - y;
	zoff = 64 - z;

	/*OLED SCREEN*/
	oled_clearScreen(OLED_COLOR_BLACK);

	while (1) {
		if (pre_Monitor_Mode != monitor_Mode) {
			/*OLED SCREEN*/
			oled_clearScreen(OLED_COLOR_BLACK);
			if (monitor_Mode) {
				sprintf(transmit_Msg, "MONITOR");
				oled_putString(30, 5, (uint8_t *) transmit_Msg,
						OLED_COLOR_WHITE, OLED_COLOR_BLACK);
				/*UART MSG*/
				sprintf(transmit_Msg, "Entering MONITOR MODE.\r\n");
				UART_Send(LPC_UART3, (uint8_t *) transmit_Msg,
						strlen(transmit_Msg), BLOCKING);
			}
			pre_Monitor_Mode = monitor_Mode;
		}
		/*Stable mode*/
		if (monitor_Mode == false) {
			led7seg_setChar('X', FALSE); //clear 7 seg
			seg = 0;
			blue_off()
			;
			red_off()
			;
		}
		/*Monitor mode*/
		if (monitor_Mode) {
			if (siren_flag == 1) {         //call for help
				printf("inside int3\n");
				//playSong(song);
				siren_flag = 0;
			}

			/*200ms loop*/
			if (ms_Flag_200) {
				light_value = light_read(); /*read Light*/
				acc_read(&x, &y, &z); /*read accelerometer*/
				x = x + xoff;
				y = y + yoff;
				z = z + zoff;
				temp_value = temp_read(); /*read temperature*/
				if (light_value <= LOW_LIGHT_WARNING) {
					blue_on()
					;
				} else {
					blue_off()
					;
				}
				if (temp_value >= HIGH_TEMP_WARNING) {
					red_on()
					;
				}
				ms_Flag_200 = false;
			}

			/*1sec loop*/
			stopTime = msTicks;
			// increment this number every 1 sec
			if ((stopTime - startTime) > 1000) {
				startTime = msTicks;
				seg++;
				seg = seg % 16;
			}
			led7seg_setChar(segArray[seg], FALSE);

			if (seg == 5 || seg == 10 || seg == 15) {
				display_readings(light_value, x, y, z, temp_value);
				if (seg == 15) {
					/*sent to uart*/
					transmit_Count++;
//						L = (light_value >= 0) ? '+': "-";
//						T = (temp_value >= 0) ? '+': "-";
//						Ax = (x >= 0) ? '+': "-";
//						Ay = (y >= 0) ? '+': "-";
//						Az = = (z >= 0) ? '+': "-";
					sprintf(transmit_Msg,
							"%u%u%u_-_T%0.2f_L%u_AX%0.2f_AY%0.2f_AZ%0.2f\r\n",
							(transmit_Count / 100),
							((transmit_Count / 10) % 10), (transmit_Count % 10),
							((double) temp_value / 10), light_value, (double) x,
							(double) y, (double) z);
					UART_Send(LPC_UART3, (uint8_t *) transmit_Msg,
							strlen(transmit_Msg), BLOCKING);
				}
			}
			sec_Flag = false;
		}
	}
}

