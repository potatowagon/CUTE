/*****************************************************************************
 *   A demo example using several of the peripherals on the base board
 *
 *   Copyright(C) 2011, EE2024
 *   All rights reserved.
 *
 ******************************************************************************/
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"

#include "joystick.h"
#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"
#include "light.h"
#include "temp.h"
#include "led7seg.h"
#include "lpc17xx_uart.h"

static uint8_t barPos = 2;

static uint8_t light_value = 0;

static int32_t temp_value = 0;

volatile uint32_t msTicks = 0;

static char SEGMENT_DISPLAY;

static void moveBar(uint8_t steps, uint8_t dir) {
	uint16_t ledOn = 0;

	if (barPos == 0)
		ledOn = (1 << 0) | (3 << 14);
	else if (barPos == 1)
		ledOn = (3 << 0) | (1 << 15);
	else
		ledOn = 0x07 << (barPos - 2);

	barPos += (dir * steps);
	barPos = (barPos % 16);

	pca9532_setLeds(ledOn, 0xffff);
}

static void drawOled(uint8_t joyState) {
	static int wait = 0;
	static uint8_t currX = 48;
	static uint8_t currY = 32;
	static uint8_t lastX = 0;
	static uint8_t lastY = 0;

	if ((joyState & JOYSTICK_CENTER) != 0) {
		oled_clearScreen(OLED_COLOR_BLACK);
		return;
	}

	if (wait++ < 3)
		return;

	wait = 0;

	if ((joyState & JOYSTICK_UP) != 0 && currY > 0) {
		currY--;
	}

	if ((joyState & JOYSTICK_DOWN) != 0 && currY < OLED_DISPLAY_HEIGHT - 1) {
		currY++;
	}

	if ((joyState & JOYSTICK_RIGHT) != 0 && currX < OLED_DISPLAY_WIDTH - 1) {
		currX++;
	}

	if ((joyState & JOYSTICK_LEFT) != 0 && currX > 0) {
		currX--;
	}

	if (lastX != currX || lastY != currY) {
		oled_putPixel(currX, currY, OLED_COLOR_WHITE);
		lastX = currX;
		lastY = currY;
	}
}

#define NOTE_PIN_HIGH() GPIO_SetValue(0, 1<<26);
#define NOTE_PIN_LOW()  GPIO_ClearValue(0, 1<<26);

#define Green_On() GPIO_SetValue(2, 1 << 1); //linked to light sensor
#define Green_Off() GPIO_ClearValue(2, 1 << 1);

#define Blue_On() GPIO_SetValue(0, 1 << 26); //linked to speaker
#define Blue_Off() GPIO_ClearValue(0, 1 << 26);

#define Red_On() GPIO_SetValue(2, 1 << 0); //link to temp sensor
#define Red_Off() GPIO_ClearValue(2, 1 << 0);

#define LOW_LIGHT_WARNING 50
#define HIGH_TEMP_WARNING 31

static uint32_t notes[] = { 2272, // A - 440 Hz
		2024, // B - 494 Hz
		3816, // C - 262 Hz
		3401, // D - 294 Hz
		3030, // E - 330 Hz
		2865, // F - 349 Hz
		2551, // G - 392 Hz
		1136, // a - 880 Hz
		1012, // b - 988 Hz
		1912, // c - 523 Hz
		1703, // d - 587 Hz
		1517, // e - 659 Hz
		1432, // f - 698 Hz
		1275, // g - 784 Hz
		};

static void playNote(uint32_t note, uint32_t durationMs) {

	uint32_t t = 0;

	if (note > 0) {

		while (t < (durationMs * 1000)) {
			NOTE_PIN_HIGH()
			;
			Timer0_us_Wait(note / 2);
			//delay32Us(0, note / 2);

			NOTE_PIN_LOW()
			;
			Timer0_us_Wait(note / 2);
			//delay32Us(0, note / 2);

			t += note;
		}

	} else {
		Timer0_Wait(durationMs);
		//delay32Ms(0, durationMs);
	}
}

static uint32_t getNote(uint8_t ch) {
	if (ch >= 'A' && ch <= 'G')
		return notes[ch - 'A'];

	if (ch >= 'a' && ch <= 'g')
		return notes[ch - 'a' + 7];

	return 0;
}

static uint32_t getDuration(uint8_t ch) {
	if (ch < '0' || ch > '9')
		return 400;

	/* number of ms */

	return (ch - '0') * 200;
}

static uint32_t getPause(uint8_t ch) {
	switch (ch) {
	case '+':
		return 0;
	case ',':
		return 5;
	case '.':
		return 20;
	case '_':
		return 30;
	default:
		return 5;
	}
}

static void playSong(uint8_t *song) {
	uint32_t note = 0;
	uint32_t dur = 0;
	uint32_t pause = 0;

	/*
	 * A song is a collection of tones where each tone is
	 * a note, duration and pause, e.g.
	 *
	 * "E2,F4,"
	 */

	while (*song != '\0') {
		note = getNote(*song++);
		if (*song == '\0')
			break;
		dur = getDuration(*song++);
		if (*song == '\0')
			break;
		pause = getPause(*song++);

		playNote(note, dur);
		//delay32Ms(0, pause);
		Timer0_Wait(pause);

	}
}

static uint8_t * song = (uint8_t*) "C2.C2,D4,C4,F4,E8,";
//(uint8_t*)"C2.C2,D4,C4,F4,E8,C2.C2,D4,C4,G4,F8,C2.C2,c4,A4,F4,E4,D4,A2.A2,H4,F4,G4,F8,";
//(uint8_t*)"D4,B4,B4,A4,A4,G4,E4,D4.D2,E4,E4,A4,F4,D8.D4,d4,d4,c4,c4,B4,G4,E4.E2,F4,F4,A4,A4,G8,";

static void init_ssp(void) {
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);

}

static void init_i2c(void) {
	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);
}

/*uart*/

void pinsel_uart3(void) {
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 0;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 1;
	PINSEL_ConfigPin(&PinCfg);
}

void init_uart(void) {
	UART_CFG_Type uartCfg;
	uartCfg.Baud_rate = 115200;
	uartCfg.Databits = UART_DATABIT_8;
	uartCfg.Parity = UART_PARITY_NONE;
	uartCfg.Stopbits = UART_STOPBIT_1;
	//pin select for uart3;
	pinsel_uart3();
	//supply power & setup working parameters for uart3
	UART_Init(LPC_UART3, &uartCfg);
	//enable transmit for uart3
	UART_TxCmd(LPC_UART3, ENABLE);
}

static char* msg = NULL;
void uart_test(void) {
	uint8_t data = 0;
	uint32_t len = 0;
	uint8_t line[64];

	init_uart();
	//test sending message
	msg = "Welcome to EE2024 \r\n";
	UART_Send(LPC_UART3, (uint8_t *) msg, strlen(msg), BLOCKING);
	//test receiving a letter and sending back to port
	UART_Receive(LPC_UART3, &data, 1, BLOCKING);
	UART_Send(LPC_UART3, &data, 1, BLOCKING);
	//test receiving message without knowing message length
	len = 0;
	do {
		UART_Receive(LPC_UART3, &data, 1, BLOCKING);

		if (data != '\r') {
			len++;
			line[len - 1] = data;
		}
	} while ((len < 64) && (data != '\r'));
	line[len] = 0;
	UART_SendString(LPC_UART3, &line);
	printf("--%s--\n", line);
	while (1)
		;
	return;
}

//get current tick (time)
static uint32_t getTicks(void) {
	return msTicks;
}

void init_GPIO(void) {
	// Initialize button
	PINSEL_CFG_Type PinCfg;

	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 10;

	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(2, 1 << 10, 0);

	//RGB led

	//red
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 0;

	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(2, 1 << 0, 1);

	//blue
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 26;

	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(2, 1 << 26, 1);

	//green
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 1;

	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(2, 1 << 1, 1);

	/*SW4 monitor button*/
	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 1;
	PinCfg.Pinnum = 31;

	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(1, 1 << 31, 0);

}

// This function is called every 1ms
void SysTick_Handler(void) {
	msTicks++;
}

static int int_flag = 0;

void EINT3_IRQHandler(void) {
	// SW3

	printf("inside int3\n");
	LPC_GPIOINT ->IO0IntClr |= 1 << 4;

	int_flag = 1;

}

void init_speaker(void) {
	GPIO_SetDir(2, 1 << 0, 1);
	GPIO_SetDir(2, 1 << 1, 1);

	GPIO_SetDir(0, 1 << 27, 1);
	GPIO_SetDir(0, 1 << 28, 1);
	GPIO_SetDir(2, 1 << 13, 1);
	GPIO_SetDir(0, 1 << 26, 1);

	GPIO_ClearValue(0, 1 << 27); //LM4811-clk
	GPIO_ClearValue(0, 1 << 28); //LM4811-up/dn
	GPIO_ClearValue(2, 1 << 13); //LM4811-shutdn
}

void init_all(void) {
	init_i2c();
	init_ssp();
	init_GPIO();
	led7seg_init();
	init_speaker();

	// SystemTick clock configuration
	SysTick_Config(SystemCoreClock / 1000);  // every 1ms

	pca9532_init();
	joystick_init();
	acc_init();
	oled_init();
	light_enable();
	light_setRange(LIGHT_RANGE_64000);

	temp_init(&getTicks);

	uint8_t dir = 1;
	moveBar(1, dir);

}

void stable_mode(void) {

}

void monitor_mode(void) {

}

int toggle_mode_sw4(int monBtnState, uint8_t *Mon_btn) {
	uint8_t prevStateMonBtn;
	prevStateMonBtn = *Mon_btn;
	*Mon_btn = (GPIO_ReadValue(1) >> 31) & 0x01;

	if (*Mon_btn != prevStateMonBtn) {
		monBtnState++;
		monBtnState %= 4;
	}
	return monBtnState;

}
int main(void) {

	int32_t xoff = 0;
	int32_t yoff = 0;
	int32_t zoff = 0;

	int8_t x = 0;

	int8_t y = 0;
	int8_t z = 0;

	uint8_t wait = 0;

	uint8_t state = 0;

	uint8_t btn1 = 1;

	/*
	 * Assume base board in zero-g position when reading first value.
	 */
	acc_read(&x, &y, &z);
	xoff = 0 - x;
	yoff = 0 - y;
	zoff = 64 - z;

	oled_clearScreen(OLED_COLOR_BLACK);

	uint32_t startTime, stopTime;
	uint8_t seg = 0;
	startTime = 0;

	char segArray[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',
			'8', 'C', '0', 'E', 'F' };
	int rgbFlag = 0;
	int prevStateMonBtn;
	int monBtnState = 3;
	uint8_t Mon_btn = 1;

	LPC_GPIOINT ->IO0IntEnF |= 1 << 4;
	LPC_GPIOINT ->IO2IntEnF |= 1 << 5;

	NVIC_EnableIRQ(EINT3_IRQn);

	uint8_t clearedScreen = 0;

	while (1) {

		/*Stable mode*/
		/*clear 7 seg*/
		led7seg_setChar('X', FALSE);
		seg = 15;

		/*blink blue off*/Blue_Off()

		/*blink red off8*/Red_Off()

		uint8_t printStatus[50] = { 0 };

		if (clearedScreen == 0) {
			oled_clearScreen(OLED_COLOR_BLACK);
			clearedScreen = 1;
		}
		sprintf(printStatus, "Powered ON");
		oled_putString(10, 5, (uint8_t *) printStatus, OLED_COLOR_WHITE,
				OLED_COLOR_BLACK);

		/*toggle sw4
		prevStateMonBtn = Mon_btn;
		Mon_btn = (GPIO_ReadValue(1) >> 31) & 0x01;

		if (Mon_btn != prevStateMonBtn) {
			monBtnState++;
			monBtnState %= 4;
		}
		/*---end of toggle sw4----*/
		monBtnState = toggle_stable_monitor_sw4(monBtnState, &Mon_btn);

		/*uart test*/
		//uart_test();
		/*Monitor mode*/
		while (monBtnState == 1 || monBtnState == 2) {

			clearedScreen = 0;

			uint8_t printStatus[50] = { 0 };
			sprintf(printStatus, "MONITOR MODE");
			oled_putString(10, 5, (uint8_t *) printStatus, OLED_COLOR_WHITE,
					OLED_COLOR_BLACK);

			if (int_flag == 1) {
				printf("inside int3\n");
				int_flag = 0;
			}
			stopTime = msTicks;

			/*7seg*/
			// increment this number every 1 sec
			if ((stopTime - startTime) > 1000) {
				startTime = msTicks;
				seg++;
				seg = seg % 16;

				/*if (rgbFlag == 0) {
				 //red
				 GPIO_SetValue(2, 1 << 0);
				 GPIO_ClearValue(0, 1 << 26);
				 GPIO_ClearValue(2, 1 << 1);
				 }


				 if (rgbFlag == 1) {

				 //blue
				 GPIO_ClearValue(2, 1 << 0);
				 GPIO_SetValue(0, 1 << 26);
				 GPIO_ClearValue(2, 1 << 1);

				 }
				 if (rgbFlag == 2) {

				 //green
				 GPIO_ClearValue(2, 1 << 0);
				 GPIO_ClearValue(0, 1 << 26);
				 GPIO_SetValue(2, 1 << 1);

				 }

				 rgbFlag++;
				 rgbFlag %= 3;*/

			}

			led7seg_setChar(segArray[seg], FALSE);
			/* ####### Light Sensor ###### */
			/* # */

			light_value = light_read();

			/* ############# */

			/* ####### Accelerometer and LEDs  ###### */
			/* # */

			/*Light sensor*/
			light_value = light_read();

			acc_read(&x, &y, &z);
			x = x + xoff;
			y = y + yoff;
			z = z + zoff;

			if (y < 0) {
				dir = 1;
				y = -y;
			} else {
				dir = -1;
			}

			if (y > 1 && wait++ > (40 / (1 + (y / 10)))) {
				moveBar(1, dir);
				wait = 0;
			}

			/* # */
			/* ############################################# */

			/* ####### Temperature sensor  ###### */
			/* # */
			temp_value = temp_read();

			/* # */
			/* ############################################# */

			if (seg == 5 || seg == 10 || seg == 15) {
				/*display readings*/

				//light
				uint8_t toPrint[50] = { 0 };

				sprintf(toPrint, "light: %u\n", light_value);

				oled_putString(10, 20, (uint8_t *) toPrint, OLED_COLOR_WHITE,
						OLED_COLOR_BLACK);

				//acc
				uint8_t toPrint2[50] = { 0 };
				sprintf(toPrint2, "Acc:(%d,%d,%d)\n", x, y, z);

				oled_putString(10, 35, (uint8_t *) toPrint2, OLED_COLOR_WHITE,
						OLED_COLOR_BLACK);

				//temp
				uint8_t toPrint3[50] = { 0 };
				int temp1 = temp_value / 10;
				int temp_frac = temp_value % 10;
				sprintf(toPrint3, "Temp: %d.%d", temp1, temp_frac);

				oled_putString(10, 50, (uint8_t *) toPrint3, OLED_COLOR_WHITE,
						OLED_COLOR_BLACK);

				if (seg == 15) {
					/*sent to uart*/

				}

			}

			/* ####### Joystick and OLED  ###### */
			/* # */

			state = joystick_read();
			if (state != 0)
				drawOled(state);

			/* # */
			/* ############################################# */
			btn1 = (GPIO_ReadValue(2) >> 10) & 0x01;

			/* ############ Trimpot and RGB LED  ########### */
			/* # */

			if (btn1 == 0) {
				playSong(song);
			}

			Timer0_Wait(1);

			/*-----------toggle sw4---------------*/
			prevStateMonBtn = Mon_btn;
			Mon_btn = (GPIO_ReadValue(1) >> 31) & 0x01;

			if (Mon_btn != prevStateMonBtn) {

				monBtnState++;
				monBtnState %= 4;
			}
			/*---end of toggle sw4----*/
		}
	}
}
void check_failed(uint8_t *file, uint32_t line) {
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while (1)
		;
}

